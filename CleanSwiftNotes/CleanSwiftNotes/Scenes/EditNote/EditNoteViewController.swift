//
//  EditNoteViewController.swift
//  CleanSwiftNotes
//
//  Created by Andy Weinstein on 16 Tevet 5780.
//  Copyright (c) 5780 AW. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



protocol EditNoteDisplayLogic: class
{
  func displayNote(viewModel: EditNote.ShowNote.ViewModel)
}

class EditNoteViewController: UIViewController, EditNoteDisplayLogic
{
    
@IBOutlet weak var textNote : UITextView?
    
  var interactor: (EditNoteBusinessLogic & EditNoteDataStore)?
  var router: (NSObjectProtocol & EditNoteRoutingLogic & EditNoteDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = EditNoteInteractor()
    let presenter = EditNotePresenter()
    let router = EditNoteRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
        var note = interactor?.note
        note?.text = textNote?.text ?? ""
        let request = EditNote.ShowNote.Request(note: note)
        interactor?.saveUpdatedNote(request: request)
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    showNoteToEdit()
    textNote?.becomeFirstResponder()
  }
    
    // MARK: Edit Note
    func showNoteToEdit()
    {
        let request = EditNote.ShowNote.Request()
        interactor?.showNoteToEdit(request: request)
    }

  
  // MARK: Display Note
  
    func displayNote(viewModel: EditNote.ShowNote.ViewModel) {
        textNote?.text = viewModel.note?.text
    }
}
