//
//  MainViewController.swift
//  CleanSwiftNotes
//
//  Created by Andy Weinstein on 15 Tevet 5780.
//  Copyright (c) 5780 AW. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class
{
  func displayFetchedNotes(viewModel: Main.ListNotes.FetchNotes.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    // MARK - Control Outlets
    
    @IBOutlet weak var buttonNewNote : UIButton?
    @IBOutlet weak var buttonEditNote : UIButton?
    @IBOutlet weak var buttonEraseNote : UIButton?
    @IBOutlet weak var listOfNotes : UITableView?
    @IBOutlet weak var buttonEmptyTrash : UIButton?
    @IBOutlet weak var listOfTrash : UITableView?
    
    
    // MARK - UITableView Delegates
    func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        if (tableView == listOfNotes) {
            return getNumOfNotes()
        }
        else if (tableView == listOfTrash) {
            return getNumOfTrash()
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        var cell : UITableViewCell? = tableView.dequeueReusableCell(withIdentifier: "cell")
        if cell == nil {
            cell = UITableViewCell(style: UITableViewCellStyle.default, reuseIdentifier: "cell")
        }
        if (tableView == listOfNotes) {
            cell?.textLabel!.text = getNoteTitle(indexPath.row)
        }
        else if (tableView == listOfTrash) {
            cell?.textLabel!.text = getTrashTitle(indexPath.row)
        }
        cell?.textLabel?.numberOfLines = 0 //todo is this right?
        
        return cell!
    }
    
    
    // MARK: High Level Components
    
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
    

  
  // MARK: View lifecycle
  
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchNotes()
    }

  
  // MARK: Do stuff!
    
    var editableNotes: [Main.ListNotes.FetchNotes.ViewModel.DisplayedNote] = []
    var trashNotes: [Main.ListNotes.FetchNotes.ViewModel.DisplayedNote] = []
    
    func fetchNotes()
    {
        let request = Main.ListNotes.FetchNotes.Request()
        interactor?.fetchNotes(request: request)
    }
    
    func displayFetchedNotes(viewModel: Main.ListNotes.FetchNotes.ViewModel)
    {
        editableNotes = viewModel.editableNotes
        trashNotes = viewModel.trashNotes
        listOfNotes?.reloadData()
        listOfTrash?.reloadData()
    }
    
    func getNumOfNotes() -> Int {
        return editableNotes.count
    }
    
    func getNumOfTrash() -> Int {
        return trashNotes.count
    }
    
    func getNoteTitle(_ index : Int) -> String {
        return editableNotes[index].title
    }
    
    func getTrashTitle(_ index : Int) -> String {
        return trashNotes[index].title
    }
    
    
    @IBAction func doEraseNote(sender: UIControl, forEvent event: UIEvent) {
        
    }
    
    @IBAction func doEmptyTrash(sender: UIControl, forEvent event: UIEvent) {
        
    }
    
    @IBAction func doneEditingNote(_ segue: UIStoryboardSegue) {
        
    }
}
